
%%
%%%%%%%%generate different PPP with different densities
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Simulation of SINR given different densities of Uniformly Distributed   %
% Base Stations. Shadowing field is generated by R file 5000*5000m area   %
% with de-correlation distance 100m                                       %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all;
clc;
%%%%% Initial set up
alpha = 4;
N0 = -104;
lambda_upper = 100; %% Maximal density of a 1000*1000 area
lambda_set = [3 5 9 10 15 20 30 40 50 100 200 300 500 1000];
sigma = 8; %% standard deviation of correlated shadow fading
DeCorrDis = 100;
P = 40;


%%%%% load shadowing field
rng('shuffle')

array_id = getenv('PBS_ARRAYID');
if isempty(array_id)
    array_id = '0';
end

field_id = str2num(array_id);
matFileName = sprintf('dat/ShadowField/ExpSF%dDeCorr%d.mat', field_id, DeCorrDis);
if exist(matFileName, 'file')
    load(matFileName);
    shadowField = B;
else
    fprintf('File %s does not exist.\n', matFileName);
end
traceFileName = sprintf('dat/traces/trace%d.mat', field_id);
if exist(traceFileName, 'file')
    load(traceFileName);
    % throw the first 1000 locations
    MU_Position = traces(:,1001:11000)';
else
    fprintf('File %s does not exist.\n', traceFileName);
end

% load('trace1.mat');
% load('ShadowField1.mat');
% MU_Position = traces(:,1001:11000)';
% shadowField = B;
for j = 1:length(lambda_set)
    %%%%%%%%calculate outage probability for the x axis%%%%%
    lambda = lambda_set(j);
    r = sqrt(lambda_upper/lambda*1000*1000);
    %%%%%%First generate base stations
    %     sample_Size = 1;
    S = size(MU_Position);
    pathLength = S(1);
    
    max_SINR = zeros(pathLength, 1);
    max_SIR = zeros(pathLength, 1);
    max_SINR_Index = zeros(pathLength, 1);
    max_SIR_Index = zeros(pathLength, 1);
    NB_SINR = zeros(pathLength, 1);
    NB_SIR = zeros(pathLength, 1);
    disp(lambda);
    %%%%%Generate random Base Stations%%%%%%%%%%%
    BS_points = lambda_upper;
    BS_position_X = rand(lambda_upper,1).*r;
    BS_position_Y = rand(lambda_upper,1).*r;
    BS_position = [BS_position_X-r/2 BS_position_Y-r/2];
    
    N = size(BS_position);
    dis_BStoMU = zeros(N(1),pathLength);
    %%%%%%%%%%%calculate pathloss
    PL = zeros(N(1),pathLength);
    PL_DB = zeros(N(1),pathLength);
    for i = 1 : N(1)
        for n = 1 : pathLength
            dis_BStoMU(i,n) = sqrt((BS_position(i,1)-MU_Position(n,1))^2 + (BS_position(i,2) - MU_Position(n,2))^2);
            PL(i,n) = (dis_BStoMU(i,n) + 1)^(-alpha);
            PL_DB(i,n) = 10*log10(PL(i,n));
        end
    end
    NB_Dis = zeros(pathLength,1);
    NB = zeros(pathLength, 1);
    for n = 1 : pathLength
        [NB_Dis(n),NB(n)] = min(dis_BStoMU(:,n));
    end
    %         disp('pathloss');
    
    %%%%%%%%%%calculate shadow fading%%%%%%%%%%%%%
    shadowing_DB = zeros(N(1),pathLength);
    shadowing = zeros(N(1),pathLength);
    
    for i = 1 : N(1)
        
        for n = 1 : pathLength
             if sqrt(round(BS_position(i,1))^2 + round(BS_position(i,2))^2) >= 2500
                shadowing_DB(i) = normrnd(0, sigma);
            else
                shadowing_DB(i) = B(round(BS_position(i,1))+2500, round(BS_position(i,2))+2500)*sigma;
            end
            shadowing(i) = 10^(shadowing_DB(i)/10);
%             if sqrt(round(-BS_position(i,1) + MU_Position(n,1))^2 + round(-BS_position(i,2) + MU_Position(n,2))^2) >= 1500
%                 shadowing_DB(i, n) = normrnd(0, sigma);
%             else
%                 shadowing_DB(i,n) = shadowField(round(-BS_position(i,1) + MU_Position(n,1))+1500, round(-BS_position(i,2) + MU_Position(n,2))+1500)*sigma;
                %                     Shadowing_DB2(i,j) = ShadowField2(FieldID(i), round(-BaseStationPosition(i,1) + MU_Position(j,1))+1500, round(-BaseStationPosition(i,2) + MU_Position(j,2))+1500)*Sigma;
%             end
            %                 Shadowing2(i,j) = 10^(Shadowing_DB2(i,j)/10);
            shadowing(i,n) = 10^(shadowing_DB(i,n)/10);
        end
    end
    %         disp('shadowfading')
    %%%%%%%%%%calculate Rayleigh fading %%%%%%%%
    %         Rayleigh_DB = zeros(N(1),r);
    %         Rayleigh = zeros(N(1),r);
    %         for i = 1 : N(1)
    %             for j = 1 : PathLength
    %                 x = sqrt(1/2).*randn(1);
    %                 y = sqrt(1/2).*randn(1);
    %                 Rayleigh(i,j) = x.^2 + y.^2;
    %                 Rayleigh_DB(i,j) = 10*log10(Rayleigh(i,j));
    %             end
    %         end
    
    
    RxPower = zeros(N(1),pathLength);
    
    for i = 1 : N(1)
        for n = 1 : pathLength
            %                 RxPower(i,j) = 10^(P0/10) * 0.001 * PL(i,j) * Shadowing(i,j) * Rayleigh(i,j);
            RxPower(i,n) = 10^(P/10) * 0.001 * PL(i,n) * shadowing(i,n);
            %                 RxPower2(i,j) = 10^(P0/10) * 0.001 * PL(i,j) * Shadowing2(i,j);
        end
    end
    
    SINR = zeros(N(1),pathLength);
    SIR = zeros(N(1),pathLength);
    SINR_DB = zeros(N(1),pathLength);
    SIR_DB = zeros(N(1),pathLength);
    %         SINR2 = zeros(N(1),PathLength);
    %         SIR2 = zeros(N(1),PathLength);
    %         SINR_DB2 = zeros(N(1),PathLength);
    %         SIR_DB2 = zeros(N(1),PathLength);
    for i = 1 : N(1)
        for n = 1 : pathLength
            SINR(i,n) = RxPower(i,n)/(sum(RxPower(:,n))-RxPower(i,n)+10^(N0/10));
            SIR(i,n) = RxPower(i,n)/(sum(RxPower(:,n))-RxPower(i,n));
            SINR_DB(i,n) = 10*log10(SINR(i,n));
            SIR_DB(i,n) = 10*log10(SIR(i,n));
            %                 SINR2(i,j) = RxPower2(i,j)/(sum(RxPower2(:,j))-RxPower2(i,j)+10^(N0/10));
            %                 SIR2(i,j) = RxPower2(i,j)/(sum(RxPower2(:,j))-RxPower2(i,j));
            %                 SINR_DB2(i,j) = 10*log10(SINR2(i,j));
            %                 SIR_DB2(i,j) = 10*log10(SIR2(i,j));
        end
    end
    for n = 1 : pathLength
        [max_SINR(n), max_SINR_Index(n)] = max(SINR_DB(:,n));
        [max_SIR(n), max_SIR_Index(n)] = max(SIR_DB(:,n));
        NB_SINR(n) = SINR_DB(NB(n),n);
        NB_SIR(n) = SIR_DB(NB(n),n);
    end
    
    filename = ['dat/MaxSINR/Max_SINR_Tx' num2str(P) 'BS' num2str(lambda) 'Exp' num2str(DeCorrDis) 'ID' num2str(field_id) '.mat'];
    save(filename, 'max_SINR');
    filename = ['dat/MaxSIR/Max_SIR_Tx' num2str(P) 'BS' num2str(lambda) 'Exp' num2str(DeCorrDis) 'ID' num2str(field_id) '.mat'];
    save(filename, 'max_SIR');
    filename = ['dat/NBSINR/Max_SINR_Tx' num2str(P) 'BS' num2str(lambda) 'Exp' num2str(DeCorrDis) 'ID' num2str(field_id) '.mat'];
    save(filename, 'NB_SINR');
    filename = ['dat/NBSIR/Max_SIR_Tx' num2str(P) 'BS' num2str(lambda) 'Exp' num2str(DeCorrDis) 'ID' num2str(field_id) '.mat'];
    save(filename, 'NB_SIR');
end

%     figure(1);
%     plot((1:j), Max_SINR);
%     hold on;
%     figure(2);
%     plot((1:j), Max_SIR);
%     hold on;
